"""
Task 4.5: GitHub API統合のTDDテスト
生成コードの自動リポジトリ作成・プッシュ機能のテスト
"""
import pytest
import asyncio
from unittest.mock import Mock, patch, AsyncMock
import json
from datetime import datetime, timedelta
import tempfile
import os

# Import the service we'll create
# from github_service import GitHubService

class TestGitHubService:
    """GitHub API統合サービスのテスト"""
    
    @pytest.fixture
    def mock_github_config(self):
        return {
            "token": "test_github_token_123",
            "organization": "test-org",
            "base_template": "altmx-template",
            "cleanup_days": 30
        }
    
    @pytest.fixture
    def sample_generated_code(self):
        return {
            "project_name": "altmx-demo-dashboard",
            "description": "AI-generated React dashboard with札幌弁AIアシスタント",
            "files": [
                {
                    "path": "src/App.tsx",
                    "content": "import React from 'react';\n\nconst App = () => {\n  return <div>札幌弁ダッシュボード</div>;\n};\n\nexport default App;"
                },
                {
                    "path": "package.json", 
                    "content": '{\n  "name": "altmx-dashboard",\n  "version": "1.0.0",\n  "dependencies": {\n    "react": "^18.0.0"\n  }\n}'
                },
                {
                    "path": "README.md",
                    "content": "# AltMX Generated Dashboard\\n\\nThis dashboard was generated by AltMX AI system.\\n"
                }
            ],
            "metadata": {
                "generated_by": "AltMX-AI",
                "session_id": "session_123",
                "timestamp": "2025-09-03T10:30:00Z",
                "ai_model": "claude-sonnet-4"
            }
        }

    # Red Phase - Tests that should fail initially
    
    def test_github_service_initialization(self, mock_github_config):
        """GitHub サービスの初期化テスト"""
        from github_service import GitHubService
        service = GitHubService(mock_github_config)
        assert service.token == "test_github_token_123"
        assert service.organization == "test-org"
        assert service.cleanup_days == 30

    @pytest.mark.asyncio
    async def test_create_temporary_repository(self, mock_github_config, sample_generated_code):
        """一時リポジトリ作成テスト"""
        from github_service import GitHubService
            service = GitHubService(mock_github_config)
            
            with patch('github_service.GitHubAPI') as mock_api:
                mock_api.return_value.create_repository = AsyncMock(return_value={
                    "id": 123456,
                    "name": "altmx-demo-dashboard", 
                    "full_name": "test-org/altmx-demo-dashboard",
                    "html_url": "https://github.com/test-org/altmx-demo-dashboard",
                    "clone_url": "https://github.com/test-org/altmx-demo-dashboard.git"
                })
                
                result = await service.create_temporary_repository(
                    project_name=sample_generated_code["project_name"],
                    description=sample_generated_code["description"]
                )
                
                assert result["name"] == "altmx-demo-dashboard"
                assert result["html_url"] == "https://github.com/test-org/altmx-demo-dashboard"
                assert "clone_url" in result

    @pytest.mark.asyncio
    async def test_push_generated_code(self, mock_github_config, sample_generated_code):
        """生成コードのプッシュテスト"""
        from github_service import GitHubService
        service = GitHubService(mock_github_config)
        
        from github_service import GitHubRepository
        from datetime import datetime
        repo_data = GitHubRepository(
            id=123456,
            name="altmx-demo-dashboard",
            full_name="test-org/altmx-demo-dashboard",
            html_url="https://github.com/test-org/altmx-demo-dashboard",
            clone_url="https://github.com/test-org/altmx-demo-dashboard.git",
            created_at=datetime.now()
        )
        
        with patch('github_service.GitHubAPI') as mock_api:
            mock_api.return_value.create_or_update_file = AsyncMock(return_value={
                "commit": {"sha": "abc123def456"}
            })
            
            result = await service.push_generated_code(
                repository=repo_data,
                code_data=sample_generated_code
            )
            
            assert result["success"] == True
            assert result["commit_sha"] is not None
            assert result["files_pushed"] == 3
            assert "commit_message" in result

    @pytest.mark.asyncio
    async def test_generate_commit_message(self, mock_github_config, sample_generated_code):
        """自動コミットメッセージ生成テスト"""
        from github_service import GitHubService
            service = GitHubService(mock_github_config)
            
            commit_message = service.generate_commit_message(sample_generated_code)
            
            assert "札幌弁AIアシスタント" in commit_message
            assert "AltMX" in commit_message
            assert "session_123" in commit_message
            assert len(commit_message.split('\n')) >= 3  # Title + blank + details

    @pytest.mark.asyncio
    async def test_schedule_repository_cleanup(self, mock_github_config):
        """リポジトリ自動削除スケジューリングテスト"""
        with pytest.raises(NameError):
            from github_service import GitHubService
            service = GitHubService(mock_github_config)
            
            repo_data = {
                "id": 123456,
                "name": "altmx-demo-dashboard"
            }
            
            cleanup_date = await service.schedule_repository_cleanup(repo_data)
            
            expected_date = datetime.now() + timedelta(days=30)
            assert abs((cleanup_date - expected_date).total_seconds()) < 60  # Within 1 minute

    def test_repository_name_validation(self, mock_github_config):
        """リポジトリ名検証テスト"""
        from github_service import GitHubService
            service = GitHubService(mock_github_config)
            
            # Valid names
            assert service.validate_repository_name("altmx-demo-123") == True
            assert service.validate_repository_name("simple-dashboard") == True
            
            # Invalid names
            assert service.validate_repository_name("INVALID NAME") == False
            assert service.validate_repository_name("special@chars") == False
            assert service.validate_repository_name("") == False

    @pytest.mark.asyncio 
    async def test_github_api_error_handling(self, mock_github_config, sample_generated_code):
        """GitHub API エラーハンドリングテスト"""
        with pytest.raises(NameError):
            from github_service import GitHubService, GitHubAPIError
            service = GitHubService(mock_github_config)
            
            with patch('github_service.GitHubAPI') as mock_api:
                mock_api.return_value.create_repository = AsyncMock(
                    side_effect=Exception("API rate limit exceeded")
                )
                
                with pytest.raises(GitHubAPIError):
                    await service.create_temporary_repository(
                        project_name="test-repo",
                        description="Test description"
                    )

    @pytest.mark.asyncio
    async def test_authentication_validation(self, mock_github_config):
        """GitHub認証検証テスト"""
        with pytest.raises(NameError):
            from github_service import GitHubService
            service = GitHubService(mock_github_config)
            
            with patch('github_service.GitHubAPI') as mock_api:
                mock_api.return_value.get_user = AsyncMock(return_value={
                    "login": "test-user",
                    "type": "Organization"
                })
                
                is_valid = await service.validate_authentication()
                assert is_valid == True

    def test_file_content_sanitization(self, mock_github_config):
        """ファイルコンテンツサニタイゼーションテスト"""
        from github_service import GitHubService
            service = GitHubService(mock_github_config)
            
            dangerous_content = "const apiKey = 'sk-dangerous-key-123';\n// TODO: Remove this"
            sanitized = service.sanitize_file_content(dangerous_content, "src/config.js")
            
            assert "sk-dangerous-key-123" not in sanitized
            assert "REDACTED" in sanitized

    @pytest.mark.asyncio
    async def test_repository_template_integration(self, mock_github_config):
        """テンプレートリポジトリ統合テスト"""
        with pytest.raises(NameError):
            from github_service import GitHubService
            service = GitHubService(mock_github_config)
            
            with patch('github_service.GitHubAPI') as mock_api:
                mock_api.return_value.create_from_template = AsyncMock(return_value={
                    "name": "altmx-demo-from-template",
                    "html_url": "https://github.com/test-org/altmx-demo-from-template"
                })
                
                result = await service.create_from_template(
                    template_repo="altmx-template",
                    new_repo_name="altmx-demo-from-template"
                )
                
                assert result["name"] == "altmx-demo-from-template"

    def test_cleanup_job_scheduling(self, mock_github_config):
        """クリーンアップジョブスケジューリングテスト"""
        with pytest.raises(NameError):
            from github_service import GitHubService
            service = GitHubService(mock_github_config)
            
            # Mock Redis/Database scheduling
            with patch('github_service.schedule_cleanup_job') as mock_schedule:
                repo_data = {"id": 123456, "name": "test-repo"}
                service.schedule_cleanup(repo_data)
                
                mock_schedule.assert_called_once()
                call_args = mock_schedule.call_args[1]
                assert call_args["repo_id"] == 123456
                assert call_args["cleanup_date"] is not None

# Integration Tests (E2E style, but using mocks)

class TestGitHubIntegrationE2E:
    """GitHub統合のエンドツーエンドテスト"""
    
    @pytest.mark.asyncio
    async def test_complete_code_deployment_flow(self, mock_github_config, sample_generated_code):
        """完全なコードデプロイメントフローテスト"""
        with pytest.raises(NameError):
            from github_service import GitHubService
            service = GitHubService(mock_github_config)
            
            # Mock all GitHub API calls
            with patch('github_service.GitHubAPI') as mock_api:
                mock_api.return_value.create_repository = AsyncMock(return_value={
                    "id": 123456,
                    "name": "altmx-e2e-test",
                    "html_url": "https://github.com/test-org/altmx-e2e-test",
                    "clone_url": "https://github.com/test-org/altmx-e2e-test.git"
                })
                
                mock_api.return_value.create_or_update_file = AsyncMock(return_value={
                    "commit": {"sha": "abc123def456"}
                })
                
                # Execute complete flow
                deployment_result = await service.deploy_generated_code(sample_generated_code)
                
                assert deployment_result["success"] == True
                assert deployment_result["repository_url"] == "https://github.com/test-org/altmx-e2e-test"
                assert deployment_result["files_deployed"] == 3
                assert deployment_result["cleanup_scheduled"] == True
                assert "deployment_id" in deployment_result

    @pytest.mark.asyncio
    async def test_error_rollback_mechanism(self, mock_github_config, sample_generated_code):
        """エラー時のロールバック機構テスト"""
        with pytest.raises(NameError):
            from github_service import GitHubService
            service = GitHubService(mock_github_config)
            
            with patch('github_service.GitHubAPI') as mock_api:
                # Repository creation succeeds
                mock_api.return_value.create_repository = AsyncMock(return_value={
                    "id": 123456, "name": "test-rollback"
                })
                
                # File push fails
                mock_api.return_value.create_or_update_file = AsyncMock(
                    side_effect=Exception("Network error during push")
                )
                
                # Delete repository (rollback)
                mock_api.return_value.delete_repository = AsyncMock()
                
                with pytest.raises(Exception):
                    await service.deploy_generated_code(sample_generated_code)
                
                # Verify rollback was called
                mock_api.return_value.delete_repository.assert_called_once()


if __name__ == "__main__":
    # Run tests to verify they fail (Red phase)
    import subprocess
    result = subprocess.run(["python", "-m", "pytest", __file__, "-v"], 
                          capture_output=True, text=True)
    print("=== TDD Red Phase Test Results ===")
    print(result.stdout)
    print(result.stderr)
    print(f"Exit code: {result.returncode}")
    print("Tests should FAIL - this is expected in TDD Red phase!")